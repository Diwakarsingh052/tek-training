package main

import (
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"io"
	"log"
	pb "server/gen/proto"
)

// Defines a new function "GreetEveryone" with a receiver "us" of type userService pointer. It takes an argument "stream", which is an interface generated by the grpc protobuf compiler.
func (us *userService) GreetEveryone(stream pb.UserService_GreetEveryoneServer) error {

	//Logs a message indicating that this function was invoked
	log.Println("GreetEveryone was invoked")

	//This for loop is for continuously receiving streaming requests from the client
	for {

		// "stream.Recv()" method receives a single request from the client, it's stored in "req" and if there's an error, it is stored in "err"
		req, err := stream.Recv()

		// If the error received is "EOF", it means that the client has finished sending requests and we can exit the function, returning no error.
		if err == io.EOF {
			return nil
		}

		// If any other error is received, we return it as an Internal server error using the grpc status package
		if err != nil {
			return status.Error(codes.Internal, err.Error())
		}

		// Select statement is used for choosing from multiple send/receive channel operations which are ready to proceed
		select {
		// If the context of the stream is done, indicating a cancel or timeout, we log a message and continue with the next iteration
		case <-stream.Context().Done():
			log.Println("connection cancelled")
		// The default case in a select block is run if no other case is ready. Here, it does nothing.
		default:
		}

		// Concatenate "Hello" with the FirstName field of the received request to form the response
		res := "Hello " + req.FirstName + "!"

		// "stream.Send()" sends a response with the greeted message to the client
		err = stream.Send(&pb.GreetEveryoneResponse{
			Result: res,
		})

		// If there is an error in sending the response, it's returned as an Internal server error using the grpc status package
		if err != nil {
			return status.Error(codes.Internal, err.Error())
		}

	}
}
