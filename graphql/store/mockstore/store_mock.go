// Code generated by MockGen. DO NOT EDIT.
// Source: store.go
//
// Generated by this command:
//
//	mockgen -source store.go -destination mockstore/store_mock.go -package mockstore
//
// Package mockstore is a generated GoMock package.
package mockstore

import (
	model "graphql/graph/model"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockStorer is a mock of Storer interface.
type MockStorer struct {
	ctrl     *gomock.Controller
	recorder *MockStorerMockRecorder
}

// MockStorerMockRecorder is the mock recorder for MockStorer.
type MockStorerMockRecorder struct {
	mock *MockStorer
}

// NewMockStorer creates a new mock instance.
func NewMockStorer(ctrl *gomock.Controller) *MockStorer {
	mock := &MockStorer{ctrl: ctrl}
	mock.recorder = &MockStorerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorer) EXPECT() *MockStorerMockRecorder {
	return m.recorder
}

// AddVideo mocks base method.
func (m *MockStorer) AddVideo(video *model.Video) (*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddVideo", video)
	ret0, _ := ret[0].(*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddVideo indicates an expected call of AddVideo.
func (mr *MockStorerMockRecorder) AddVideo(video any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddVideo", reflect.TypeOf((*MockStorer)(nil).AddVideo), video)
}

// AllVideos mocks base method.
func (m *MockStorer) AllVideos() []*model.Video {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllVideos")
	ret0, _ := ret[0].([]*model.Video)
	return ret0
}

// AllVideos indicates an expected call of AllVideos.
func (mr *MockStorerMockRecorder) AllVideos() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllVideos", reflect.TypeOf((*MockStorer)(nil).AllVideos))
}

// FindVideosByID mocks base method.
func (m *MockStorer) FindVideosByID(videoID string) (*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindVideosByID", videoID)
	ret0, _ := ret[0].(*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindVideosByID indicates an expected call of FindVideosByID.
func (mr *MockStorerMockRecorder) FindVideosByID(videoID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindVideosByID", reflect.TypeOf((*MockStorer)(nil).FindVideosByID), videoID)
}

// UpdateVideo mocks base method.
func (m *MockStorer) UpdateVideo(videoID string, input model.UpdateVideoInput) (*model.Video, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVideo", videoID, input)
	ret0, _ := ret[0].(*model.Video)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVideo indicates an expected call of UpdateVideo.
func (mr *MockStorerMockRecorder) UpdateVideo(videoID, input any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVideo", reflect.TypeOf((*MockStorer)(nil).UpdateVideo), videoID, input)
}
