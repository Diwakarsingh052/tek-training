package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"
	"graphql/graph/model"
)

// CreateVideo is the resolver for the createVideo field.
func (r *mutationResolver) CreateVideo(ctx context.Context, input model.NewVideo) (*model.Video, error) {
	video := &model.Video{
		ID:    input.VideoID,
		Title: input.Title,
		URL:   input.URL,
		Author: &model.User{
			ID:   input.UserID,
			Name: input.UserName,
		},
	}
	return r.S.AddVideo(video)
}

// UpdateVideo is the resolver for the updateVideo field.
func (r *mutationResolver) UpdateVideo(ctx context.Context, videoID string, input model.UpdateVideoInput) (*model.Video, error) {
	panic(fmt.Errorf("not implemented: UpdateVideo - updateVideo"))
}

// AllVideos is the resolver for the allVideos field.
func (r *queryResolver) AllVideos(ctx context.Context) ([]*model.Video, error) {
	return r.S.AllVideos(), nil
}

// FindVideosByID is the resolver for the findVideosById field.
func (r *queryResolver) FindVideosByID(ctx context.Context, videoID string) (*model.Video, error) {
	panic(fmt.Errorf("not implemented: FindVideosByID - findVideosById"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
